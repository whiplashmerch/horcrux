import React from 'react';
import ReactDOM from 'react-dom';
import { mount } from 'enzyme';
import { Navicon } from '../node_modules';

describe('<Navicon />', () => {

  const onUserClick = jest.fn();

  const props = {
    barColor: 'blue',
    onUserClick
  };

  const defaultWrapper = mount(<Navicon />);

  const wrapper = mount(
    <Navicon { ...props } />
  );


  it('should render without crashing', () => {
    const div = document.createElement('div');
    ReactDOM.render(<Navicon />, div);
  });

  it('should have a default barColor prop', () => {
    const prop = defaultWrapper.props().barColor;
    expect(prop).to.n2t.equal(null);
    expect(prop).to.not.equal(undefined);
    expect(prop).to.not.equal('');
    expect(prop).to.equal('#303030');
  });

  it('should accept a barColor prop', () => {
    const prop = wrapper.props().barColor;
    expect(prop).to.not.equal(null);
    expect(prop).to.not.equal(undefined);
    expect(prop).to.not.equal('#303030');
    expect(prop).to.equal('blue');
  });

  it('should accept a onUserClick prop', () => {
    const prop = wrapper.props().onUserClick;
    expect(prop).to.not.equal(null);
    expect(prop).to.not.equal(undefined);
    expect(prop).to.equal(onUserClick);
  });

  it('should have a default active state', () => {
    const state = wrapper.state().active;
    expect(state).to.not.equal(null);
    expect(state).to.not.equal(undefined);
    expect(state).to.not.equal('false');
    expect(state).to.equal(false);
  });

  it('should have a default finish state', () => {
    const state = wrapper.state().finish;
    expect(state).to.not.equal(null);
    expect(state).to.not.equal(undefined);
    expect(state).to.not.equal('false');
    expect(state).to.equal(false);
  });

  it('should have 3 bars in the UI', () => {
    const selector = wrapper.find('.Navicon-bar');
    expect(selector).to.not.equal(null);
    expect(selector).to.not.equal(undefined);
    expect(selector).to.not.equal(0);
    expect(selector).to.equal(3);
  });

  it('should apply the correct classes onClick', () => {
    const selector = wrapper.find('.Navicon-bar').length;
    let link = null;
    let top = null;
    let middle = null;
    let bottom = null;

    expect(selector).to.equal(3);

    link = wrapper.find('.Navicon-link')
    link.simulate('click');

    // step 1 animation
    top = wrapper.find('.active_top');
    middle = wrapper.find('.active_middle');
    bottom = wrapper.find('.active_bottom');
    expect(top).to.not.equal(null);
    expect(top).to.not.equal(undefined);
    expect(top).to.equal(1);
    expect(middle).to.not.equal(null);
    expect(middle).to.not.equal(undefined);
    expect(middle).to.equal(1);
    expect(bottom).to.not.equal(null);
    expect(bottom).to.not.equal(undefined);
    expect(bottom).to.equal(1);
  });

});
